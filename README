== L2 Auth
Simple Lineage 2 C4 server emulator written in C as a learning exercise.

== System in Windows 10
I have uploaded my system folder that works fine in Windows 10. Remember, this
is for Lineage 2 Chronicle 4.

https://drive.google.com/file/d/18SFuJkZB7y7JlIaxoD4goPjfVwmYhutK/view?usp=sharing

The only update required is to change your hosts file.
Add the following line:

127.0.0.1 l2authd.lineage2.com

In Windows, the host file can be found in \Windows\System32\drivers\etc\hosts.
In Linux, the host file can be found in /etc/hosts.

== Streaming
If you would like to follow the project's progress, I stream 
on https://www.twitch.tv/franco_montenegro.

== Why does this project exist?
Because it's fun; because I like Lineage 2 (at least until C4 and Interlude 
chronicles) and because I like the C programming language and I thought this 
is an excellent project to work with it.

== Compile
Create a "build" folder.
Run make. Don't forget to also run make migrations to run sqlite migrations
and create database.

== Start login server
Run build/login_server. The login server will listen for connections to
localhost using port 2106.

== Start game server
Run build/game_server. The game server will listen for connection to
localhost using port 7777.

== Live changes
The game server supports changes without having to shutdown or restart
the server itself.
Just run the game server, make a change, and run make gslib. The new changes
will be live.

== Dependencies
- openssl
- sqlite3
- make (optional)

== Additional notes
This project is intended to be ran on Linux, Ubuntu and on little endian machines.
You can use Windows WSL for the Linux layer (that's what I do).

== Game and login server
This project divides the login server (from where the user can authenticate
with a username and password) from the game server (where the user can play).
This is the exact same approach as to what projects like L2J do.

== Files with ls prefix
The ls prefix stands for login server. Files using this prefix are only
used by the login server.

== Files with gs prefix
The gs prefix stands for game server. Files using this prefix are only
used by the game server.

== Files with os prefix
The os prefix stands for operating system. Files using this prefix may be used
by code targeting a specific os (for instance, src/linux/game_server/main.c) and
may also be included in both, login and game server.

== Files with no prefix
These are files used by both, the login and game server.

== Game server hot code reload
The game server logic is implemented as a library. This means it can be
loaded at runtime allowing for changes to occur and be live without having
to shut down the server.

== Lineage 2 Protocol
Lineage 2 uses TCP to send packets.

All integers are little-endian and this project is MEANT to run on little
endian machines.

The first two bytes of the packet contain the packet size and the third one, 
usually the packet type.

Other than the first packet, all the login server packets are encrypted with 
blowfish using the following hardcoded key ;5.]94-31==-%xT!^[$\000.

== To do
- [ ] Deprecate fork/process for each request.
- [ ] Check precision using time vs function returning milliseconds.
- [x] Find a way to upload system folder.
- [ ] Check what's the error when creating a new character (column index out of range)
- [ ] Implement damage
- [ ] Double check the game server when a client gets disconnected
      The requests are not being handled correctly.
- [x] Remove/deprecate cmake, it's not worth it.
- [x] Add build/makefile to rebuild project and database if required.
- [x] Check work flow. For some reason, I delete the database and needs
      to be recreated.
- [x] I think I need to tick every 0.1 seconds instead of 1 second.
- [x] Fix the movement. Even though now the position is kinda updated,
      it needs to be more precise.
- [x] Fix orc ai, it drops the brain on each step.
- [x] Hotcode reload
- [x] Display terms of service view
- [x] Display server list
- [x] Allow to enter game server
- [x] Create character
- [x] Enter world
- [x] Walk
- [x] Handle multiple connections
- [x] Correctly handle multiple packets at once
- [x] See other players
- [x] Spawn random orc (spawned when trying to restart :D)
- [x] Timers
- [x] Basic attack AI
        - if target is too far, move closer to it
        - if in reach, attack
- [x] Basic NPC AI
        - if attacked, attack!

== Want to contribute?
Awesome! Just open up an issue detailing what you will be working on, this way
we can be more organized with the work. After that, just have fun working on it!

A few rules for contributors:
- No dynamic memory allocation (only third party libs are allowed to do so)
- All variables must be initialized
- No NULL, use 0 (shorter to write)
- OS related stuff must be inside of the os folder (ie, src/linux)
- Storage related stuff, must be inside of storage/name.c (ie, storage/sqlite.c)
- Only 1 thread is used to handle requests
- Only 1 storage/database connection is used for the server
- Only game_server/main.c and login_server/main.c are allowed to spawn threads
- Variables exceeding 100 bytes, must be static and zeroed before used
- The code should be robust enough to handle either bad and good requests without crashing
- Have fun

Changes will be accepted through patches. Currently I'm using Fossil for 
versioning and this is just a git mirror.

Why? Because I'm trying new tools.

== Credits
- l2jserver (http://l2jserver.com/)
- http://fursoffers.narod.ru/Packets.htm
- https://code.google.com/archive/p/l2adenalib/wikis/L2LoginServerProtocol.wiki

== License
GPL
