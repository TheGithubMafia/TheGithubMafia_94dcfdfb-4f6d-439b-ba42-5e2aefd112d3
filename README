== L2 Auth
Simple Lineage 2 C4 server emulator written in C as a learning exercise.

== Why does this project exist?
Because it's fun; because I like Lineage 2 (at least until C4 and Interlude 
chronicles) and because I like the C programming language and I thought this 
is an excellent project to work with it.

== Dependencies
- cmake
- make
- openssl
- sqlite3

== Build & run
Just run make in the root folder.
Start login server by running build/login_server.
Start game server by running build/game_server.

== Game and login server
This project divides the login server (from where the user can authenticate
with a username and password) from the game server (where the user can play).
This is the exact same approach as to what projects like L2J do.

== Files with ls prefix
The ls prefix stands for login server. Files using this prefix are only
used by the login server.

== Files with gs prefix
The gs prefix stands for game server. Files using this prefix are only
used by the game server.

== Files with os prefix
The os prefix stands for operating system. Files using this prefix may be used
by code targeting a specific os (for instance, src/linux/game_server/main.c) and
may also be included in both, login and game server.

== Files with no prefix
These are files used by both, the login and game server.

== Game server hot code reload
The game server logic is implemented as a library. This means it can be
loaded at runtime allowing for changes to occur and be live without having
to shut down the server.

== Lineage 2 Protocol
Lineage 2 uses TCP to send packets.

All integers are little-endian and this project is MEANT to run on little
endian machines.

The first two bytes of the packet contain the packet size and the third one, 
usually the packet type.

Other than the first packet, all the login server packets are encrypted with 
blowfish using the following hardcoded key ;5.]94-31==-%xT!^[$\000.

== To do
- [x] Hotcode reload
- [x] Display terms of service view
- [x] Display server list
- [x] Allow to enter game server
- [x] Create character
- [x] Enter world
- [x] Walk
- [x] Handle multiple connections
- [x] Correctly handle multiple packets at once
- [ ] See other players
- [ ] Spawn random orc

== Want to contribute?
Awesome! Just open up an issue detailing what you will be working on, this way
we can be more organized with the work. After that, just have fun working on it!

A few rules for contributors:
- No dynamic memory allocation (only third party libs are allowed to do so)
- All variables must be initialized
- No NULL, use 0 (shorter to write)
- OS related stuff must be inside of the os folder (ie, src/linux)
- Storage related stuff, must be inside of storage/name.c (ie, storage/sqlite.c)
- Only 1 thread is used to handle requests
- Only 1 storage/database connection is used for the server
- Only game_server/main.c and login_server/main.c are allowed to spawn threads
- Variables exceeding 100 bytes, must be static and zeroed before used
- Have fun

== Credits
- l2jserver (http://l2jserver.com/)
- http://fursoffers.narod.ru/Packets.htm
- https://code.google.com/archive/p/l2adenalib/wikis/L2LoginServerProtocol.wiki

== License
GPL
